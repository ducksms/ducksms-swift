//
// DucksmsSmsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension DucksmsAPI {


open class DucksmsSmsAPI {
    /**
     Send Sms
     
     - parameter smsSchema: (body) Create a new sms (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func smsSend(smsSchema: SmsSchema? = nil, apiResponseQueue: DispatchQueue = DucksmsAPI.apiResponseQueue, completion: @escaping ((_ data: PreviewSmsSend?,_ error: Error?) -> Void)) {
        smsSendWithRequestBuilder(smsSchema: smsSchema).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send Sms
     - POST /api/v1/sms/send
     - Create a new sms
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter smsSchema: (body) Create a new sms (optional)
     - returns: RequestBuilder<PreviewSmsSend> 
     */
    open class func smsSendWithRequestBuilder(smsSchema: SmsSchema? = nil) -> RequestBuilder<PreviewSmsSend> {
        let path = "/api/v1/sms/send"
        let URLString = DucksmsAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsSchema)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PreviewSmsSend>.Type = DucksmsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
}
