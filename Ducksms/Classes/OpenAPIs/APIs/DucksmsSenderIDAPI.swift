//
// DucksmsSenderIDAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension DucksmsAPI {


open class DucksmsSenderIDAPI {
    /**
     Create a Sender ID
     
     - parameter sender: (body) Create a new sender (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSender(sender: Sender? = nil, apiResponseQueue: DispatchQueue = DucksmsAPI.apiResponseQueue, completion: @escaping ((_ data: CreatedSender?,_ error: Error?) -> Void)) {
        createSenderWithRequestBuilder(sender: sender).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a Sender ID
     - POST /api/v1/senders
     - Create a new sender id
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter sender: (body) Create a new sender (optional)
     - returns: RequestBuilder<CreatedSender> 
     */
    open class func createSenderWithRequestBuilder(sender: Sender? = nil) -> RequestBuilder<CreatedSender> {
        let path = "/api/v1/senders"
        let URLString = DucksmsAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sender)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreatedSender>.Type = DucksmsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a Sender ID
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSender(id: String, apiResponseQueue: DispatchQueue = DucksmsAPI.apiResponseQueue, completion: @escaping ((_ data: DeletedSender?,_ error: Error?) -> Void)) {
        deleteSenderWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Sender ID
     - DELETE /api/v1/senders/{id}
     - Delete an existing sender id
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter id: (path)  
     - returns: RequestBuilder<DeletedSender> 
     */
    open class func deleteSenderWithRequestBuilder(id: String) -> RequestBuilder<DeletedSender> {
        var path = "/api/v1/senders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = DucksmsAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeletedSender>.Type = DucksmsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single Sender ID
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSender(id: String, apiResponseQueue: DispatchQueue = DucksmsAPI.apiResponseQueue, completion: @escaping ((_ data: GetSender?,_ error: Error?) -> Void)) {
        getSenderWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a single Sender ID
     - GET /api/v1/senders/{id}
     - Get details on a single sender id
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter id: (path)  
     - returns: RequestBuilder<GetSender> 
     */
    open class func getSenderWithRequestBuilder(id: String) -> RequestBuilder<GetSender> {
        var path = "/api/v1/senders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = DucksmsAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetSender>.Type = DucksmsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filterStatus
     */
    public enum FilterStatus_listSender: String, CaseIterable {
        case active = "active"
        case inactive = "inactive"
    }

    /**
     List Sender ID
     
     - parameter page: (query) Page number (optional)
     - parameter filterName: (query) Filter by sender name (optional)
     - parameter filterStatus: (query) Filter by sender status (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSender(page: Int? = nil, filterName: String? = nil, filterStatus: FilterStatus_listSender? = nil, apiResponseQueue: DispatchQueue = DucksmsAPI.apiResponseQueue, completion: @escaping ((_ data: ListSender?,_ error: Error?) -> Void)) {
        listSenderWithRequestBuilder(page: page, filterName: filterName, filterStatus: filterStatus).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Sender ID
     - GET /api/v1/senders
     - List all the senders
     - BASIC:
       - type: http
       - name: BearerToken
     - responseHeaders: [X-Pagination-Count(Int), X-Pagination-Page(Int), X-Pagination-Limit(Int)]
     - parameter page: (query) Page number (optional)
     - parameter filterName: (query) Filter by sender name (optional)
     - parameter filterStatus: (query) Filter by sender status (optional)
     - returns: RequestBuilder<ListSender> 
     */
    open class func listSenderWithRequestBuilder(page: Int? = nil, filterName: String? = nil, filterStatus: FilterStatus_listSender? = nil) -> RequestBuilder<ListSender> {
        let path = "/api/v1/senders"
        let URLString = DucksmsAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "filter[name]": filterName?.encodeToJSON(), 
            "filter[status]": filterStatus?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ListSender>.Type = DucksmsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Sender ID
     
     - parameter id: (path)  
     - parameter sender: (body) Update an existing sender id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSender(id: String, sender: Sender? = nil, apiResponseQueue: DispatchQueue = DucksmsAPI.apiResponseQueue, completion: @escaping ((_ data: UpdatedSender?,_ error: Error?) -> Void)) {
        updateSenderWithRequestBuilder(id: id, sender: sender).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a Sender ID
     - POST /api/v1/senders/{id}
     - Update an existing sender id
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter id: (path)  
     - parameter sender: (body) Update an existing sender id (optional)
     - returns: RequestBuilder<UpdatedSender> 
     */
    open class func updateSenderWithRequestBuilder(id: String, sender: Sender? = nil) -> RequestBuilder<UpdatedSender> {
        var path = "/api/v1/senders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = DucksmsAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sender)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdatedSender>.Type = DucksmsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
}
